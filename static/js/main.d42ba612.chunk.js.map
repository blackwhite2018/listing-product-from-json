{"version":3,"sources":["components/Listing/Item/Item.jsx","components/Listing/Listing.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Item","options","url","MainImage","title","currency_code","price","quantity","classLevel","cn","className","href","src","alt","Listing","items","map","listing_id","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"igiFAmDeA,EA/CF,SAAC,GAA4E,IAAD,IAAzEC,QAAWC,EAA8D,EAA9DA,IAAKC,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,SAM9DC,EAAaC,IACf,CACI,YAAaF,GAAY,GACzB,eAAgBA,EAAW,IAAMA,GAAY,GAC7C,aAAcA,EAAW,KAIjC,OAAKJ,EAKD,yBAAKO,UAAU,QACX,yBAAKA,UAAU,cACX,uBAAGC,KAAOT,GACN,yBAAKU,IAAMT,EAAS,UAAgBU,IAAMT,MAGlD,yBAAKM,UAAU,gBACX,uBAAGA,UAAU,cAAeN,GAC5B,uBAAGM,UAAU,cAAb,UA1BK,CACb,IAAO,IACP,IAAO,UAwB0CL,IAAkBA,EAA3D,YAA8EC,IAC9E,uBAAGI,UAAS,wBAAqBF,IAAkBD,EAAnD,WAbD,MCKAO,G,MAnBC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,yBAAKL,UAAU,aAEPK,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,WAAYf,EAAf,EAAeA,IAAKC,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,cAAeC,EAArD,EAAqDA,MAAOC,EAA5D,EAA4DA,SAA5D,OACN,kBAAC,EAAD,CACIW,IAAMD,EACNhB,QAAU,CACNC,MAAKC,YAAWC,QAAOC,gBAAeC,QAAOC,oB,OCFtDY,EANH,kBACR,kBAAC,EAAD,CACIJ,MAAQA,KCMIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d42ba612.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\n\r\nconst Item = ({ options: { url, MainImage, title, currency_code, price, quantity } }) => {\r\n    const currency = {\r\n        'USD': '$',\r\n        'EUR': 'â‚¬'\r\n    };\r\n\r\n    const classLevel = cn(\r\n        {\r\n            'level-low': quantity <= 10,\r\n            'level-medium': quantity > 10 && quantity <= 20,\r\n            'level-high': quantity > 20\r\n        }\r\n    );\r\n\r\n    if (!MainImage) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"item\">\r\n            <div className=\"item-image\">\r\n                <a href={ url }>\r\n                    <img src={ MainImage['url_570xN'] } alt={ title } />\r\n                </a>\r\n            </div>\r\n            <div className=\"item-details\">\r\n                <p className=\"item-title\">{ title }</p>\r\n                <p className=\"item-price\">{ `${ currency[currency_code] || currency_code } ${ price }` }</p>\r\n                <p className={ `item-quantity ${ classLevel }` }>{ quantity } left</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nItem.propTypes = {\r\n    props: PropTypes.shape({\r\n        options: PropTypes.shape({\r\n            url: PropTypes.string.isRequired,\r\n            MainImage: PropTypes.object.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            currency_code: PropTypes.string.isRequired,\r\n            price: PropTypes.string.isRequired,\r\n            quantity: PropTypes.number.isRequired\r\n        })\r\n    })\r\n};\r\n\r\nexport default Item;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Item from './Item/Item';\r\nimport './css/main.css';\r\n\r\nconst Listing = ({ items }) => (\r\n    <div className=\"item-list\">\r\n        {\r\n            items.map(({ listing_id, url, MainImage, title, currency_code, price, quantity }) => (\r\n                <Item\r\n                    key={ listing_id }\r\n                    options={ {\r\n                        url, MainImage, title, currency_code, price, quantity\r\n                    } }\r\n                />)\r\n            )\r\n        }\r\n     </div>\r\n);\r\n\r\nListing.propTypes = {\r\n items: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Listing;\r\n\r\n","import React from 'react';\r\nimport Listing from './components/Listing/Listing';\r\nimport items from './etsy.json';\r\n\r\nconst App = () => (\r\n    <Listing\r\n        items={ items }\r\n    />\r\n);\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}